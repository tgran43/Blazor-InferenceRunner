@page "/register"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<EditForm Model="@userRegistration" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="userRegistration.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="userRegistration.Password" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userRegistration.ConfirmPassword" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</EditForm>

@code {
    private UserRegistration userRegistration = new();
    private string ErrorMessage { get; set; }
    [Inject] private IServiceProvider ScopedServices { get; set; }

    private async Task HandleValidSubmit()
    {
        var user = new IdentityUser { UserName = userRegistration.Email, Email = userRegistration.Email };
        var result = await UserManager.CreateAsync(user, userRegistration.Password);

        if (result.Succeeded)
        {
            var authState = new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity(new[]
            {
            new Claim(ClaimTypes.Name, user.UserName),
            new Claim(ClaimTypes.NameIdentifier, user.Id),
    }, "ApplicationCookie")));

            var authenticationStateTask = Task.FromResult(authState);
            var authenticationStateProvider = (AuthenticationStateProvider)ScopedServices.GetService(typeof(AuthenticationStateProvider));
            ((ServerAuthenticationStateProvider)authenticationStateProvider).SetAuthenticationState(authenticationStateTask);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

    private class UserRegistration
    {
        
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at most {1} characters long.", MinimumLength = 6)]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}